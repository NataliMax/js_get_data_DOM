{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCGA,IAAM,E,A,S,C,E,G,M,O,C,G,O,E,E,E,EAAiB,SAAS,gBAAgB,CAAC,qB,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,IAC3C,EAAoB,EAAE,CACtB,EAAmB,EAAE,CACrB,EAAU,EAAE,CAEb,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,I,EAAK,EAAA,EAAY,CAAA,CAAA,OAAA,QAAA,CAAA,GAAZ,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAwB,CAE3B,IAAM,EAAS,CAAC,AADH,AADV,EAAA,KAAA,CACa,WAAW,CACN,OAAO,CAAC,KAAM,IAEnC,EAAkB,IAAI,CAAC,EACzB,C,C,M,E,CALK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAOL,IAAM,EAAM,EAAkB,MAAM,CAAC,SAAC,CAAA,CAAK,CAA3C,EAAkD,OAAA,EAAM,CAAI,EAAA,GACtD,EAAU,EAAM,EAAkB,MAAM,CAE9C,EAAiB,IAAI,CAAC,GACtB,EAAiB,IAAI,CAAC,GAEjB,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAY,CAAA,CAAA,OAAA,QAAA,CAAA,GAAZ,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAA8B,CAMjC,IAAK,IANI,EAAN,EAAA,KAAA,CACG,EAAS,OAAO,GAChB,EAAQ,EAAE,CAEZ,EAAO,GAEF,EAAI,EAAO,MAAM,CAAG,EAAG,GAAK,EAAG,IACtC,EAAO,CAAM,CAAC,EAAE,CAAG,EAEC,IAAhB,EAAK,MAAM,GACb,EAAM,OAAO,CAAC,GACd,EAAO,GAIP,CAAA,EAAK,MAAM,CAAG,GAChB,EAAM,OAAO,CAAC,GAGhB,EAAQ,IAAI,CAAC,EAAM,IAAI,CAAC,KAC1B,C,C,M,E,CApBK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAsBL,IAAM,EAAU,SAAS,aAAa,CAAC,yBACjC,EAAc,SAAS,aAAa,CAAC,0BAE3C,CAAA,EAAQ,WAAW,CAAG,CAAO,CAAC,EAAE,CAChC,EAAY,WAAW,CAAG,CAAO,CAAC,EAAE","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\n// write your code here\nvar population = _to_consumable_array(document.querySelectorAll(\"span.population\"));\nvar populationNumbers = [];\nvar resultsOfNumbers = [];\nvar results = [];\nvar _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\ntry {\n    for(var _iterator = population[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n        var el = _step.value;\n        var text = el.textContent;\n        var number = +text.replace(/,/g, \"\");\n        populationNumbers.push(number);\n    }\n} catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n} finally{\n    try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n        }\n    } finally{\n        if (_didIteratorError) {\n            throw _iteratorError;\n        }\n    }\n}\nvar sum = populationNumbers.reduce(function(acc, el) {\n    return acc + el;\n}, 0);\nvar average = sum / populationNumbers.length;\nresultsOfNumbers.push(sum);\nresultsOfNumbers.push(average);\nvar _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\ntry {\n    for(var _iterator1 = resultsOfNumbers[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n        var el1 = _step1.value;\n        var result = String(el1);\n        var parts = [];\n        var part = \"\";\n        for(var i = result.length - 1; i >= 0; i--){\n            part = result[i] + part;\n            if (part.length === 3) {\n                parts.unshift(part);\n                part = \"\";\n            }\n        }\n        if (part.length > 0) parts.unshift(part);\n        results.push(parts.join(\",\"));\n    }\n} catch (err) {\n    _didIteratorError1 = true;\n    _iteratorError1 = err;\n} finally{\n    try {\n        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n            _iterator1.return();\n        }\n    } finally{\n        if (_didIteratorError1) {\n            throw _iteratorError1;\n        }\n    }\n}\nvar textSum = document.querySelector(\"span.total-population\");\nvar textAverage = document.querySelector(\"span.average-population\");\ntextSum.textContent = results[0];\ntextAverage.textContent = results[1];\n\n//# sourceMappingURL=index.7afd5bed.js.map\n","'use strict';\n\n// write your code here\nconst population = [...document.querySelectorAll('span.population')];\nconst populationNumbers = [];\nconst resultsOfNumbers = [];\nconst results = [];\n\nfor (const el of population) {\n  const text = el.textContent;\n  const number = +text.replace(/,/g, '');\n\n  populationNumbers.push(number);\n}\n\nconst sum = populationNumbers.reduce((acc, el) => acc + el, 0);\nconst average = sum / populationNumbers.length;\n\nresultsOfNumbers.push(sum);\nresultsOfNumbers.push(average);\n\nfor (const el of resultsOfNumbers) {\n  const result = String(el);\n  const parts = [];\n\n  let part = '';\n\n  for (let i = result.length - 1; i >= 0; i--) {\n    part = result[i] + part;\n\n    if (part.length === 3) {\n      parts.unshift(part);\n      part = '';\n    }\n  }\n\n  if (part.length > 0) {\n    parts.unshift(part);\n  }\n\n  results.push(parts.join(','));\n}\n\nconst textSum = document.querySelector('span.total-population');\nconst textAverage = document.querySelector('span.average-population');\n\ntextSum.textContent = results[0];\ntextAverage.textContent = results[1];\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","population","_array_without_holes","isArray","document","querySelectorAll","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","populationNumbers","resultsOfNumbers","results","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","number","text","el","value","textContent","replace","push","err","return","sum","reduce","acc","average","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","el1","result","String","parts","part","unshift","join","textSum","querySelector","textAverage"],"version":3,"file":"index.7afd5bed.js.map"}